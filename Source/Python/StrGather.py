# Copyright (c) 2007, Intel Corporation
# All rights reserved. This program and the accompanying materials
# are licensed and made available under the terms and conditions of the BSD License
# which accompanies this distribution.  The full text of the license may be found at
# http://opensource.org/licenses/bsd-license.php
#
# THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
# WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.

#
#This file is used to parse a strings file and create or add to a string database file.
#

import EdkLogger
from UniClassObject import *

COMMENT = '// '
DEFINE_STR = '#define'
COMMENT_DEFINE_STR = COMMENT + DEFINE_STR
NOT_REFERENCED = 'not referenced'
COMMENT_NOT_REFERENCED = ' ' + COMMENT + NOT_REFERENCED
CHAR_ARRAY_DEFIN = 'unsigned char'
COMMON_FILE_NAME = 'Strings'
OFFSET = 'offset'
STRING = 'string'
TO = 'to'
STRING_TOKEN = 'STRING_TOKEN'

H_C_FILE_HEADER = ['//', \
                   '//  DO NOT EDIT -- auto-generated file', \
                   '//', \
                   '//  This file is generated by the string gather utility', \
                   '//']
LANGUAGE_NAME_STRING_NAME = '$LANGUAGE_NAME'
PRINTABLE_LANGUAGE_NAME_STRING_NAME = '$PRINTABLE_LANGUAGE_NAME'

def DecToHexStr(Dec):
    HexHeader = '0x'
    if Dec < 16:
        return HexHeader + '000' + hex(Dec)[2:].upper()
    elif Dec < 256:
        return HexHeader + '00' + hex(Dec)[2:].upper()
    elif Dec < 4096:
        return HexHeader + '0' + hex(Dec)[2:].upper()
    else:
        return HexHeader + hex(Dec)

def CreateHFileHeader(BaseName):
    Str = ''
    for Item in H_C_FILE_HEADER:
        Str = WriteLine(Str, Item)
    Str = WriteLine(Str, '#ifndef _' + BaseName.upper() + '_STRINGS_DEFINE_H_')
    Str = WriteLine(Str, '#define _' + BaseName.upper() + '_STRINGS_DEFINE_H_')
    return Str

def CreateHFileContent(UniObjectClass):
    Str = ''
    ValueStartPtr = 60
    for Index in range(len(UniObjectClass.StringList)):
        Name = UniObjectClass.FindStringObjectNameByToken(Index)
        if Name != None:
            StringItem = UniObjectClass.StringList[Name]
            Line = ''
            if StringItem.Referenced == True:
                Line = DEFINE_STR + Name + ' ' * (ValueStartPtr - len(DEFINE_STR + Name)) + DecToHexStr(StringItem.Token)
            else:
                Line = COMMENT_DEFINE_STR + Name + ' ' * (ValueStartPtr - len(DEFINE_STR + Name)) + DecToHexStr(StringItem.Token) + COMMENT_NOT_REFERENCED
            Str = WriteLine(Str, Line)
    return Str

def CreateHFile(BaseName, UniObjectClass):
    HFile = WriteLine('', CreateHFileHeader(BaseName))
    HFile = WriteLine(HFile, CreateHFileContent(UniObjectClass))
    HFile = WriteLine(HFile, '#endif')
    return HFile

def CreateCFileHeader():
    Str = ''
    for Item in H_C_FILE_HEADER:
        Str = WriteLine(Str, Item)
    
    return Str
  
def CreateArrayItem(Value):
    MaxLength = 16
    Index = 0
    Line = '  '
    ArrayItem = ''
    
    for Item in Value:
        if Index < MaxLength:
            Line = Line + Item + ', '
            Index = Index + 1
        else:
            ArrayItem = WriteLine(ArrayItem, Line)
            Line = '  ' + Item +  ', '
            Index = 1
    ArrayItem = Write(ArrayItem, Line)
    
    return ArrayItem

def CreateCFileLanguageHeader(Name, PrintableName, Offset):
    Str = WriteLine('  ', COMMENT + STRING + ' ' + LANGUAGE_NAME_STRING_NAME + ' ' + OFFSET + ' ' + Offset)
    Str = WriteLine(Str, CreateArrayItem(UniToHexList(Name + u'\x00')))
    Str = WriteLine(Str, '  ' + COMMENT + STRING + ' ' + PRINTABLE_LANGUAGE_NAME_STRING_NAME + ' ' + OFFSET + ' ' + Offset)
    Str = WriteLine(Str, CreateArrayItem(PrintableName + UniToHexList(u'\x00')))
    
    return Str
    
def CreateCFileStringValue(Name, Language, Value, Offset):
    Str = WriteLine('  ', COMMENT + STRING + ' ' + UniToStr(Name) + ' ' + OFFSET + ' ' + Offset)
    Str = WriteLine(Str, CreateArrayItem(Value))
    
    return Str

def CreateCFileContent(BaseName, UniObjectClass):
    Str = ''
    Str = WriteLine(Str, CHAR_ARRAY_DEFIN + BaseName + COMMON_FILE_NAME + '[] = {')
    for Language in UniObjectClass.LanguageDef:        
        Str = Write(Str, CreateCFileLanguageHeader(Language, UniObjectClass.LanguageDef[Language], '0x00001'))
        for Index in range(2, len(UniObjectClass.StringList)):
            Name = UniObjectClass.FindStringObjectNameByToken(Index)
            if Name != None:
                #print Language
                #print Name
                #print UniObjectClass.StringList[Name].StringValue
                if Language in UniObjectClass.StringList[Name].StringValue.keys():
                    Str = Write(Str, CreateCFileStringValue(Name, Language, UniObjectClass.StringList[Name].StringValue[Language], '0x000000'))
    return Str

def CreateCFile(BaseName, UniObjectClass):
    CFile = WriteLine('', CreateCFileHeader())
    CFile = WriteLine(CFile, CreateCFileContent(BaseName, UniObjectClass))
    return CFile

def GetFileList(IncludeList, SkipList):
    if IncludeList == None:
        return None
    
    FileList = []
    if SkipList == None:
        SkipList = []
        
    for Dir in IncludeList:
        for File in os.listdir(Dir):
            File = os.path.join(Dir, os.path.normcase(File))
            #
            # Ignore Dir
            #
            if os.path.isfile(File) != True:
                continue
            #
            # Ignore file listed in skip list
            #
            IsSkip = False
            for Skip in SkipList:
                if os.path.splitext(File)[1].upper() == Skip.upper():
                    IsSkip = True
                    break
            
            if not IsSkip:
                FileList.append(File)
    
    return FileList

def SearchString(UniObjectClass, FileList):
    if FileList == []:
        return UniObjectClass
    
    for File in FileList:
        if os.path.isfile(File):
            Lines = open(File, 'r')
            for Line in Lines:
                if Line.find(STRING_TOKEN) >= 0:
                    StrName = Line[Line.find('(', Line.find(STRING_TOKEN)) + len('(') : Line.find(')', Line.find(STRING_TOKEN))].strip()
                    UniObjectClass.SetStringReferenced(StrName)
     
    UniObjectClass.ReToken()
#    for index in range(len(UniObjectClass.StringList)):
#        name = UniObjectClass.FindStringObjectNameByToken(index)
#        if name != None:
#            #print index, str(UniObjectClass.StringList[name])
#            pass
    return UniObjectClass

def GetStringFiles(UniFilList, IncludeList, SkipList, BaseName):
    Status = True
    ErrorMessage = ''
    
    if len(UniFilList) > 0:
        Uni = UniFileClassObject(UniFilList)
    else:
        Status = False
        ErrorMessage = 'No Unicode Files Found'
    
    FileList = GetFileList(IncludeList, SkipList)
    
    Uni = SearchString(Uni, FileList)
    
    if len(Uni.StringList) > 0:
        pass
    
    HFile = CreateHFile(BaseName, Uni)
    CFile = CreateCFile(BaseName, Uni)

    return Status, ErrorMessage, HFile, CFile

def Write(Target, Item):
    return Target + Item

def WriteLine(Target, Item):
    return Target + Item + '\n'
    
# This acts like the main() function for the script, unless it is 'import'ed into another
# script.
if __name__ == '__main__':
    UniFileList = ['C:\\Tiano\\Edk\\Sample\\Universal\\UserInterface\\SetupBrowser\\Dxe\\DriverSample\\inventorystrings.uni', 'C:\\Tiano\\Edk\\Sample\\Universal\\UserInterface\\SetupBrowser\\Dxe\\DriverSample\\VfrStrings.uni']
    IncludeList = ['C:\\Tiano\\Edk\\Sample\\Universal\\UserInterface\\SetupBrowser\\Dxe\\DriverSample']
    SkipList = ['.inf', '.uni']
    BaseName = 'DriverSample'
    (s, e, h, c) = GetStringFiles(UniFileList, IncludeList, SkipList, BaseName)
    print h
    print c
