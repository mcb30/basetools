# Copyright (c) 2007, Intel Corporation
# All rights reserved. This program and the accompanying materials
# are licensed and made available under the terms and conditions of the BSD License
# which accompanies this distribution.  The full text of the license may be found at
# http://opensource.org/licenses/bsd-license.php
#
# THE PROGRAM IS DISTRIBUTED UNDER THE BSD LICENSE ON AN "AS IS" BASIS,
# WITHOUT WARRANTIES OR REPRESENTATIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED.

#
#This file is used to parse a strings file and create or add to a string database file.
#

import EdkLogger
from UniClassObject import *
from BuildToolError import *

HexHeader = '0x'

COMMENT = '// '
DEFINE_STR = '#define'
COMMENT_DEFINE_STR = COMMENT + DEFINE_STR
NOT_REFERENCED = 'not referenced'
COMMENT_NOT_REFERENCED = ' ' + COMMENT + NOT_REFERENCED
CHAR_ARRAY_DEFIN = 'unsigned char'
COMMON_FILE_NAME = 'Strings'
OFFSET = 'offset'
STRING = 'string'
TO = 'to'
STRING_TOKEN = 'STRING_TOKEN'

LENGTH_EFI_HII_STRING_PACK_HEADER = 22
LENGTH_STRING_OFFSET = 4

H_C_FILE_HEADER = ['//', \
                   '//  DO NOT EDIT -- auto-generated file', \
                   '//', \
                   '//  This file is generated by the string gather utility', \
                   '//']
LANGUAGE_NAME_STRING_NAME = '$LANGUAGE_NAME'
PRINTABLE_LANGUAGE_NAME_STRING_NAME = '$PRINTABLE_LANGUAGE_NAME'

def DecToHexStr(Dec, Digit):
    return eval("'0x%0" + str(Digit) + "X' % int(Dec)")

def DecToHexList(Dec):
    Hex = "%08X" % int(Dec)
    List = [HexHeader + Hex[6:8], HexHeader + Hex[4:6], HexHeader + Hex[2:4], HexHeader + Hex[0:2]]
    return List

def CreateHFileHeader(BaseName):
    Str = ''
    for Item in H_C_FILE_HEADER:
        Str = WriteLine(Str, Item)
    Str = WriteLine(Str, '#ifndef _' + BaseName.upper() + '_STRINGS_DEFINE_H_')
    Str = WriteLine(Str, '#define _' + BaseName.upper() + '_STRINGS_DEFINE_H_')
    return Str

def CreateHFileContent(UniObjectClass):
    Str = ''
    ValueStartPtr = 60
    Line = COMMENT_DEFINE_STR + ' ' + LANGUAGE_NAME_STRING_NAME + ' ' * (ValueStartPtr - len(DEFINE_STR + LANGUAGE_NAME_STRING_NAME)) + DecToHexStr(0, 4) + COMMENT_NOT_REFERENCED
    Str = WriteLine(Str, Line)
    Line = COMMENT_DEFINE_STR + ' ' + PRINTABLE_LANGUAGE_NAME_STRING_NAME + ' ' * (ValueStartPtr - len(DEFINE_STR + PRINTABLE_LANGUAGE_NAME_STRING_NAME)) + DecToHexStr(1, 4) + COMMENT_NOT_REFERENCED
    Str = WriteLine(Str, Line)
    for Index in range(2, len(UniObjectClass.OrderedStringList[UniObjectClass.LanguageDef[0][0]])):
        StringItem = UniObjectClass.OrderedStringList[UniObjectClass.LanguageDef[0][0]][Index]
        Name = StringItem.StringName
        Token = StringItem.Token
        Referenced = StringItem.Referenced
        if Name != None:
            Line = ''
            if Referenced == True:
                Line = DEFINE_STR + ' ' + Name + ' ' * (ValueStartPtr - len(DEFINE_STR + Name)) + DecToHexStr(Token, 4)
            else:
                Line = COMMENT_DEFINE_STR + ' ' + Name + ' ' * (ValueStartPtr - len(DEFINE_STR + Name)) + DecToHexStr(Token, 4) + COMMENT_NOT_REFERENCED
            Str = WriteLine(Str, Line)
    return Str

def CreateHFile(BaseName, UniObjectClass):
    #HFile = WriteLine('', CreateHFileHeader(BaseName))
    HFile = WriteLine('', CreateHFileContent(UniObjectClass))
    #HFile = WriteLine(HFile, '#endif')
    return HFile

def CreateCFileHeader():
    Str = ''
    for Item in H_C_FILE_HEADER:
        Str = WriteLine(Str, Item)
    
    return Str
  
def CreateArrayItem(Value, Width = 16):
    MaxLength = Width
    Index = 0
    Line = '  '
    ArrayItem = ''
    
    for Item in Value:
        if Index < MaxLength:
            Line = Line + Item + ', '
            Index = Index + 1
        else:
            ArrayItem = WriteLine(ArrayItem, Line)
            Line = '  ' + Item +  ', '
            Index = 1
    ArrayItem = Write(ArrayItem, Line.rstrip())
    
    return ArrayItem

def CreateCFileStringDef(Name, Offset, Token, UseOtherLangDef = ''):
    Comment = ''
    if UseOtherLangDef != '':
        Comment = ' - not defined for this language -- using secondary language ' + UniToStr(UseOtherLangDef) + ' definition'
    Str = Write('', CreateArrayItem(DecToHexList(Offset)) + '  ' + COMMENT + 'offset to string ' + Name + ' (' + DecToHexStr(Token, 4) + ')' + Comment)

    return Str
    
def CreateCFileStringValue(Name, Language, Value, Offset):    
    Str = WriteLine('  ', COMMENT + STRING + ' ' + Name + ' ' + OFFSET + ' ' + DecToHexStr(Offset, 8))
    Str = WriteLine(Str, CreateArrayItem(Value))
    
    return Str

def CreateCFileContent(BaseName, UniObjectClass):
    Str = ''

    Str = WriteLine(Str, CHAR_ARRAY_DEFIN + ' ' + BaseName + COMMON_FILE_NAME + '[] = {\n' )
    for IndexI in range(len(UniObjectClass.LanguageDef)):
        Language = UniObjectClass.LanguageDef[IndexI][0]
        LangPrintName = UniObjectClass.LanguageDef[IndexI][1]
        Length = 0
        NameLength = 0
        Count = 0
        for Item in UniObjectClass.OrderedStringList[Language]:
            if Item.Referenced:
                Length = Length + Item.Length
                Count = Count + 1

        Str = WriteLine(Str, '//******************************************************************************')
        Str = WriteLine(Str, COMMENT + 'Start of string definitions for ' + Language)
        
        #
        # EFI_HII_STRING_PACK_HEADER
        #
        Offset = LENGTH_EFI_HII_STRING_PACK_HEADER + LENGTH_STRING_OFFSET * Count
        Length = Offset + Length
        List = DecToHexList(Length) + DecToHexList(2)[0:2] + DecToHexList(Offset) + DecToHexList(Offset + len(UniToHexList(Language)) + 2) + DecToHexList(Count) + DecToHexList(0)
        Str = WriteLine(Str, CreateArrayItem(List, 8))
        
        Str = WriteLine(Str, '  // offset 0x16')
        StrStringDef = ''
        StrStringValue = ''
        for Item in UniObjectClass.OrderedStringList[Language]:
            Name = Item.StringName
            Value = Item.StringValueByteList
            Referenced = Item.Referenced
            Token = Item.Token
            Length = Item.Length
            UseOtherLangDef = Item.UseOtherLangDef
             
            if Referenced:
                StrStringDef = WriteLine(StrStringDef, CreateCFileStringDef(Name, Offset, Token, UseOtherLangDef))
                StrStringValue = Write(StrStringValue, CreateCFileStringValue(Name, Language, Value, Offset))
                Offset = Offset + Length
            else:
                StrStringDef = WriteLine(StrStringDef, '  ' + COMMENT + Name + ' ' + NOT_REFERENCED)

        Str = WriteLine(Str, StrStringDef)
        Str = WriteLine(Str, StrStringValue)
    return Str

def CreateCFileEnd():
    Str = WriteLine('  ', '// strings terminator pack')
    Str = WriteLine(Str, '  ' + '0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ')
    Str = WriteLine(Str, '  ' + '0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ')
    Str = Write(Str, '};')
    return Str

def CreateCFile(BaseName, UniObjectClass):
    #CFile = WriteLine('', CreateCFileHeader())
    CFile = WriteLine('', CreateCFileContent(BaseName, UniObjectClass))
    CFile = WriteLine(CFile, CreateCFileEnd())
    return CFile

def GetFileList(IncludeList, SkipList):
    if IncludeList == None:
        raise AutoGenError("Include path for unicode file is not defined")
    
    FileList = []
    if SkipList == None:
        SkipList = []
        
    for Dir in IncludeList:
        for File in os.listdir(Dir):
            File = os.path.join(Dir, os.path.normcase(File))
            #
            # Ignore Dir
            #
            if os.path.isfile(File) != True:
                continue
            #
            # Ignore file listed in skip list
            #
            IsSkip = False
            for Skip in SkipList:
                if os.path.splitext(File)[1].upper() == Skip.upper():
                    IsSkip = True
                    break
            
            if not IsSkip:
                FileList.append(File)
    
    return FileList

def SearchString(UniObjectClass, FileList):
    if FileList == []:
        return UniObjectClass
    
    for File in FileList:
        if os.path.isfile(File):
            Lines = open(File, 'r')
            for Line in Lines:
                if Line.find(STRING_TOKEN) >= 0:
                    StrName = Line[Line.find('(', Line.find(STRING_TOKEN)) + len('(') : Line.find(')', Line.find(STRING_TOKEN))].strip()
                    UniObjectClass.SetStringReferenced(StrName)
     
    UniObjectClass.ReToken()

    return UniObjectClass

def GetStringFiles(UniFilList, IncludeList, SkipList, BaseName):
    Status = True
    ErrorMessage = ''
    
    if len(UniFilList) > 0:
        Uni = UniFileClassObject(UniFilList)
    else:
        raise AutoGenError('No unicode files given')
    
    FileList = GetFileList(IncludeList, SkipList)
    
    Uni = SearchString(Uni, FileList)
    
    HFile = CreateHFile(BaseName, Uni)
    CFile = CreateCFile(BaseName, Uni)
    
    return HFile, CFile

def Write(Target, Item):
    return Target + Item

def WriteLine(Target, Item):
    return Target + Item + '\n'
    
# This acts like the main() function for the script, unless it is 'import'ed into another
# script.
if __name__ == '__main__':
    print 'start'
    
    UniFileList = ['C:\\Tiano\\Edk\\Sample\\Universal\\UserInterface\\SetupBrowser\\Dxe\\DriverSample\\inventorystrings.uni', 'C:\\Tiano\\Edk\\Sample\\Universal\\UserInterface\\SetupBrowser\\Dxe\\DriverSample\\VfrStrings.uni']
    IncludeList = ['C:\\Tiano\\Edk\\Sample\\Universal\\UserInterface\\SetupBrowser\\Dxe\\DriverSample']
#    UniFileList = (['C:\\Tiano\\Edk\\Sample\\Platform\\Generic\\Dxe\\PlatformBds\\DeviceMngr\\DeviceManagerStrings.uni'])
#    UniFileList.append('C:\\Tiano\\Edk\\Sample\\Platform\\Generic\\Dxe\\PlatformBds\\BootMngr\\BootManagerStrings.uni')
#    UniFileList.append('C:\\Tiano\\Edk\\Sample\\Platform\\Generic\\Dxe\\PlatformBds\\Strings.uni')
#    UniFileList.append('C:\\Tiano\\Edk\\Sample\\Platform\\Generic\\Dxe\\PlatformBds\\FrontPageStrings.uni')
#
#    IncludeList = ['C:\\Tiano\\Edk\\Sample\\Platform\\Generic\\']
#    IncludeList.append('C:\\Tiano\\Edk\\Sample\\Platform\\Generic\\Dxe\\PlatformBds\\BootMngr\\')
#    IncludeList.append('C:\\Tiano\\Edk\\Sample\\Platform\\Generic\\Dxe\\')
#    IncludeList.append('C:\\Tiano\\Edk\\Sample\\Platform\\Generic\\Dxe\\PlatformBds\\')
#    IncludeList.append('C:\\Tiano\\Edk\\Sample\\Platform\\Generic\\Dxe\\PlatformBds\\DeviceMngr\\')
   
    
    SkipList = ['.inf', '.uni']
    BaseName = 'SetupBrowser'
    (h, c) = GetStringFiles(UniFileList, IncludeList, SkipList, BaseName)
    hfile = open('C:\string.h', 'w')
    cfile = open('C:\string.c', 'w')
    hfile.write(h)
    cfile.write(c)
    
    print 'end'
